using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GoogleCalendarModule
{
    public interface IGoogleCalendar
    {
        /// <summary>
        /// Returns jsonString containing all Google calendars
        /// </summary>
        /// <param name="accessToken">Oauth2 access token(JWT)</param>
        /// <returns></returns>
        Task<string> GetAllCalendars(string accessToken);

        /// <summary>
        /// Creates an event in a specific Google calendar
        /// </summary>
        /// <param name="accessToken">Oauth2 access token(JWT)</param>
        /// <param name="startDate">Start datetime of the event, will be parsed to universal timestamp YYYY-MM-DDTHH:MM:SS.MMMZ</param>
        /// <param name="endDate">End datetime of the event, will be parsed to universal timestamp YYYY-MM-DDTHH:MM:SS.MMMZ</param>
        /// <param name="title">Title of the event to create, Google calls it summary</param>
        /// <param name="description">Description of the event to create</param>
        /// <param name="location">Location of the event to create</param>
        /// <returns></returns>
        Task<string> CreateEvent(string accessToken, DateTime startDate, DateTime endDate, string title, string description, string location);

        /// <summary>
        /// Return new auth token by using existing refresh token
        /// </summary>
        /// <param name="refreshToken">Refresh token obtained when the account owner authenticates via Oauth2 for using Google Calendar API</param>
        /// <returns></returns>
        string RefreshAuthToken(string refreshToken);

        /// <summary>
        /// Invites another Google account to an event already created. The atendee gets the existing event replicated inside their Google Calendar.
        /// </summary>
        /// <param name="accessToken">Oauth2 access token(JWT)</param>
        /// <param name="eventId">EventId of existing event. Keep in mind that this Id is Google´s and not generated by the local system</param>
        /// <param name="atendeesGmail">Gmail account of the user you want to invite to the event</param>
        /// <param name="startDate">Start datetime of the event, will be parsed to universal timestamp YYYY-MM-DDTHH:MM:SS.MMMZ</param>
        /// <param name="endDate">End datetime of the event, will be parsed to universal timestamp YYYY-MM-DDTHH:MM:SS.MMMZ</param>
        /// <param name="title">Title of the event to invite, Google calls it summary</param>
        /// <param name="description">Description of the event to invite</param>
        /// <param name="location">Location of the event to invite</param>
        /// <returns></returns>
        Task<bool> AddAttendee(string accessToken, string eventId, List<string> atendeesGmail, DateTime startDate, DateTime endDate, string title, string description, string location);

        /// <summary>
        /// Deletes specific event from the user´s Google calendar(user asociated with the accessToken), if the event has atendees 
        /// they are notified to their mail and the event is also deleted from their calendars.
        /// </summary>
        /// <param name="accessToken">Oauth2 access token(JWT)</param>
        /// <param name="eventId">EventId of existing event. Keep in mind that this Id is Google´s and not generated by the local system</param>
        /// <returns></returns>
        Task<bool> DeleteEvent(string accessToken, string eventId);

    }
}
